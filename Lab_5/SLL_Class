////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                       @ Author- Sabva Jay Dilipbhai                                                //
//                                       $ ID-202101224                                                               //
//                                       % Linked List (class)                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include<iostream>
using namespace std;
class node
{
    public:
    int data;
    node* next;
    node(int d)
    {
        data=d;
        next=NULL;
    }

};
class linkedlist
{
    public:
    node* head;
    linkedlist()
    {
        head=NULL;
    }
    void insertatf(int data)
    {
        
        node* temp=new node(data);
        if(head==NULL)
        {
            head=temp;
            return ;
        }
        else
        {
            temp->next=head;
            head=temp;
        }
    }
    void insertatl(int data)
    {
        node* temp=new node(data);
        temp->next=NULL;
        if(head==NULL)
        {
            head=temp;
            return ;
        }
        else{
        node* temp1=head;
            while(temp1->next!=NULL)
            {
                temp1=temp1->next;
            }
            temp1->next=temp;
        }
    }
    void insertatpos(int data,int pos)
    {
        node* temp=new node(data);
        if(head==NULL)
        {
            head=temp;
            return;
        }
        if(pos==1)
        {
            temp->next=head;
            head=temp;
            return;
        }
        node* temp1=head;
        int i=1;
        while(i<pos-1)
        {
            temp1=temp1->next;
        }
        temp->next=temp1->next;
        temp1->next=temp;
    }
   void deletion(int val) {
   if (head == NULL) {
      cout << "List is empty" << endl;
      return;
   }
   if (head -> data == val) {
      node * temp = head; //creating a new node
      head = head -> next;
      delete temp; //deleting the node
      return;
   }
   node * temp1 = head; //creating a new node
   while (temp1 -> next != NULL) {
      if (temp1 -> next -> data == val) {
         node * temp = temp1 -> next; //creating a new node
         temp1 -> next = temp -> next; //assigning the address of the next of the node to the next of the node at the position
         delete temp;
         return;
      }
      temp1 = temp1 -> next; //assigning the address of the next node to temp1
   }
   cout << "Element not found" << endl;
}
    void traverse()
    {
        if(head==NULL)
        {
            cout<<"List is empty\n";
        }
        node* temp=head;
        while(temp!=NULL)
        {
            cout<<temp->data<<" ";
            temp=temp->next;
        }
        cout<<endl;
    }
};
int main() {
    linkedlist l;
   int choice = 0;
   while (choice != 6) {
      cout << "1.Insert at beginning" << endl;
      cout << "2.Insert at end" << endl;
      cout << "3.Insert at position" << endl;
      cout << "4.Delete an element" << endl;
      cout << "5.Traverse The Linkedlist" << endl;
      cout << "6.Exit" << endl;
      cin >> choice;
      switch (choice) {
      case 1: {
         int data;
         cout << "Enter the element" << endl;
         cin >> data;
         l.insertatf(data);
         break;
      }
      case 2: {
         int data;
         cout << "Enter the element" << endl;
         cin >> data;
         l.insertatl(data);
         break;
      }
      case 3: {
         int data, pos;
         cout << "Enter the element" << endl;
         cin >> data;
         cout << "Enter the position" << endl;
         cin >> pos;
         l.insertatpos(data, pos);
         break;
      }
      case 4: {
         int data;
         cout << "Enter the element" << endl;
         cin >> data;
         l.deletion(data);
         break;
      }
      case 5: {
         l.traverse();
         break;
      }
      case 6: {
         break;
      }
      default: {
         cout << "Invalid choice" << endl;
      }

      }
   }
   return 0;
}
